[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hongyuan Jia. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Adler D, Jia H (2023). rdyncall: Improved Foreign Function Interface Dynamic Bindings C Libraries. R package version 0.9.0.9000, https://dyncall.org.","code":"@Manual{,   title = {rdyncall: Improved Foreign Function Interface and Dynamic Bindings to C Libraries},   author = {Daniel Adler and Hongyuan Jia},   year = {2023},   note = {R package version 0.9.0.9000},   url = {https://dyncall.org}, }"},{"path":"/index.html","id":"rdyncall","dir":"","previous_headings":"","what":"Improved Foreign Function Interface and Dynamic Bindings to C Libraries","title":"Improved Foreign Function Interface and Dynamic Bindings to C Libraries","text":"rdyncall R bindings DynCall libries flexible Foreign Function Interface (FFI) R C. Unfortunately, rdyncall package archived CRAN since Sep. 2014 hasn’t updated since . repo ongoing effort make CRAN . original source rdyncall hosted dyncall.org. Hopefully updates repo can eventually merged upstream future. Currently, can try rdyncall installing GitHub. original introduction rdyncall:","code":"remotes::install_github(\"hongyuanjia/rdyncall\")"},{"path":"/index.html","id":"short-introduction","dir":"","previous_headings":"","what":"Short Introduction","title":"Improved Foreign Function Interface and Dynamic Bindings to C Libraries","text":"rdyncall facilities dynamic R bindings C interface common shared libraries flexible Foreign Function Interface interoperability R C. Since initial presentation package Use!R 2009, number improvements done rdyncall, low-level DynCall libraries build system official release CRAN.","code":""},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Improved Foreign Function Interface and Dynamic Bindings to C Libraries","text":"package comprises toolkit work C interfaces native code within dynamic R interpreter without need C wrapper compilation: Dynamic R bindings common C shared libraries, across platforms. Foreign Function Interface supports almost C arg/return types built-type-checking facility. Portable naming loading shared libraries across platforms. Handling aggregate C struct union data types. Wrapping R functions C callbacks. Binding C functions R batches. intended audience package developers experienced C, need complete R bindings C libraries. want write cross-platform portable system-level code R. need FFI supports almost C fundamental types arguments return types thus need compilation wrapper C code want work C struct/union types directly R interested dynamic binding techniques static dynamic languages cross-platform binding strategies.","code":""},{"path":"/index.html","id":"brief-tour-12-dynamic-r-bindings-to-c-libraries","dir":"","previous_headings":"","what":"Brief Tour 1/2: Dynamic R Bindings to C Libraries","title":"Improved Foreign Function Interface and Dynamic Bindings to C Libraries","text":"dynamic binding interface consists single function, similar ‘library’ ‘require’: portname refers ‘DynPort’ file name represents R binding common C interface library. function side effect attaching newly created R name space, populated thin R helper objects C entities underlying C library: call wrapper C functions symbolic constants C macros enums, type information objects C struct union data types. package contains repository following DynPort files: order use DynPort host system, shared C libraries need installed first. See manual page ‘rdyncall-demos’ (type ?‘rdyncall-demos’) detailed description installation notes several libraries , collected large range operating-systems OS distributions. Since rdyncall package alredy ported across major R platforms, code uses DynPort can run cross-platform without compilation. small example using SDL OpenGL multimedia/3D: detailed version including user-interface handling available demo(SDL).","code":"dynport(portname) # load SDL and OpenGL bindings dynport(SDL) dynport(GL)  # initialize video sub-system SDL_Init(SDL_INIT_VIDEO)  # open double-buffered OpenGL window surface surface <- SDL_SetVideoMode(640,480,32,SDL_OPENGL+SDL_DOUBLEBUF)  # print dimension by accessing fields external C pointer to struct SDL_Surface print( paste(\"dimenstion:\", surface$w, \"x\", surface$h ))  # clear buffer glClearColor(0.3,0.6,0.8,0) glClear(GL_COLOR_BUFFER_BIT)  # update display SDL_GL_SwapBuffers()"},{"path":"/index.html","id":"brief-tour-22-alternative-ffi-via-dyncall","dir":"","previous_headings":"","what":"Brief Tour 2/2: Alternative FFI via ‘dyncall’","title":"Improved Foreign Function Interface and Dynamic Bindings to C Libraries","text":"alternative foreign function interface offered ‘dyncall’ similar intend ‘.C’. allows call shared library functions directly R, without additional wrapper C code needed, supports almost fundamental C data types uses function type signature text specification type-checking flexible conversions R C values. interface following: ‘signature’ character string encodes arguments return-type C function. example C function OpenGL API: one specify function type via “ffff)v” type signature pass additional arguments ‘…’: Support pointers (low-level void typed pointers struct/union) wrapping R functions first-level C function pointers also available.","code":"dyncall(address, signature, ...) void glClearColor(float red, float green, float blue, float alpha); dyncall(addressOf_glClearColor, \"ffff)v\", 0.3,0.7,1,0) # load C math library across major platforms (Windows,Mac OS X,Linux) mathlib <- dynfind(c(\"msvcrt\",\"m\",\"m.so.6\"))  # resolve symbol 'sqrt' x <- dynsym(mathlib,\"sqrt\")  # C function call 'double sqrt(double x)' with x=144 dyncall(x, \"d)d\", 144)  # dyncall uses complex mapping of types, same works with 'integer' argument: dyncall(x, \"d)d\", 144L)"},{"path":"/index.html","id":"implementation-details","dir":"","previous_headings":"","what":"Implementation Details","title":"Improved Foreign Function Interface and Dynamic Bindings to C Libraries","text":"package contains low-level services related generic invocation machine-code functions using official calling convention specifications binary interface. similar service exists oppositve direction order write R functions wrap first-level C function callback pointers. implementation based libraries DynCall Project implement small amount code Assembly play closely together calling conventions various processor-architectures platforms. implementation can tricky done calling-convention basis. efforts legitimate non-portsble approach due small code size generic machine-call solution designed dynamic interpreters. (total size shared lib object rdyncall ~60kb )","code":""},{"path":"/index.html","id":"portability-and-platforms","dir":"","previous_headings":"","what":"Portability and Platforms","title":"Improved Foreign Function Interface and Dynamic Bindings to C Libraries","text":"large set platforms calling conventions already supported suite testing tools ensure stable implementation low-level. Processor-Architectures: - Intel i386 32-bit AMD 64-bit Platforms - PowerPC 32-bit (support callbacks System V systems yet implemented) - ARM 32-bit (support Thumb) - MIPS 32- 64-bit (support callbacks yet implemented) - SPARC 32-bit 64-bit (support callbacks yet implemented) DynCall libraries tested Linux, Mac OS X, Windows, BSD derivates, Solaris exotic platforms game consoles, Plan9, Haiku Minix. R Package tested several major 32- 64-bit R platforms including Windows 32/64-bit, Linux (i386,amd64,ppc,arm), NetBSD (i386,amd64), Solaris (i386,amd64). release, support callbacks available MIPS SPARC. Callbacks PowerPC 32-bit Mac OS X work fine, ELF/System V-based PowerPC systems, callbacks yet implemented.","code":""},{"path":"/index.html","id":"more-information","dir":"","previous_headings":"","what":"More Information","title":"Improved Foreign Function Interface and Dynamic Bindings to C Libraries","text":"demos examples package. 20-page vignette title “Foreign Library Interface” available via vignette(\"FLI\"). cross-platform audio/visual OpenGL-based demo-scene production written 100% pure R available : https://dyncall.org/demos/soulsalicious/index.html video demo also website. website DynCall Project https://dyncall.org/","code":""},{"path":"/reference/dynbind.html","id":null,"dir":"Reference","previous_headings":"","what":"Binding C library functions via thin call wrappers — dynbind","title":"Binding C library functions via thin call wrappers — dynbind","text":"Function bind several foreign functions C library via installation thin R call wrappers.","code":""},{"path":"/reference/dynbind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Binding C library functions via thin call wrappers — dynbind","text":"","code":"dynbind(libnames, signature, envir = parent.frame(), callmode = \"default\",         pattern = NULL, replace = NULL, funcptr = FALSE)"},{"path":"/reference/dynbind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Binding C library functions via thin call wrappers — dynbind","text":"libnames vector character strings giving short library names shared library loaded. See dynfind details. signature character string specifying library signature determines set foreign function names types. See details. envir environment use installation call wrappers. callmode character string specifying calling convention, see details. pattern NULL regular expression character string applied symbolic names. replace NULL replacement character string applied pattern part symbolic names. funcptr logical, indicates whether foreign objects refer functions (FALSE, default) function pointer variables (TRUE rarely needed).","code":""},{"path":"/reference/dynbind.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Binding C library functions via thin call wrappers — dynbind","text":"dynbind makes set C functions available R installation thin call wrappers. set functions, including symbolic name function type, specified signature ; character string encodes library signature: library signature compact plain-text format specify set function bindings. consists function names corresponding call signatures. Function bindings separated ‘;’ (semicolon) ; white spaces (including tab new line) allowed semicolon. example specifies three function bindings OpenGL library: Symbolic names resolved using library specified libnames using dynfind loading. function, thin call wrapper function created using following template: <MODE> replaced callmode argument, see dyncall     details calling conventions. <TARGET> replaced external pointer, resolved     ‘function-name’. <SIGNATURE> replaced call signature string contained     signature. call wrapper installed environment given envir. assignment name obtained function signature. pattern replace given, text replacement applied name assignment, useful basic C name space mangling exchanging prefix. special case, dynbind supports binding pointer--function variables, indicated setting funcptr TRUE, case <TARGET> replaced expression unpack(<TARGET>,\"p\",0) order dereference <TARGET> pointer--function variable call-time.","code":"\"glAccum(If)v ; glClear(I)v ; glClearColor(ffff)v ;\" function(...) .dyncall.<MODE> ( <TARGET>, <SIGNATURE>, ... )"},{"path":"/reference/dynbind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Binding C library functions via thin call wrappers — dynbind","text":"function returns list two fields: libhandle External pointer returned dynload. unresolved.symbols vector character strings, names unresolved symbols. side effect, wrapper, dynbind assigns ‘function-name’  corresponding call wrapper function environment given envir. shared library found, error reported.","code":""},{"path":[]},{"path":"/reference/dynbind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Binding C library functions via thin call wrappers — dynbind","text":"","code":"# \\donttest{ # Install two wrappers to functions of the R shared C library. info <- dynbind(\"R\",\" R_ShowMessage(Z)v; R_rsort(pi)v; \") R_ShowMessage(\"hello\") #> NULL # }"},{"path":"/reference/dyncall.html","id":null,"dir":"Reference","previous_headings":"","what":"Foreign Function Interface with support for almost all C types — dyncall","title":"Foreign Function Interface with support for almost all C types — dyncall","text":"Functions call pre-compiled code support C argument return types.","code":""},{"path":"/reference/dyncall.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Foreign Function Interface with support for almost all C types — dyncall","text":"","code":"dyncall( address, signature, ... , callmode = \"default\" ) dyncall.default      ( address, signature, ... ) dyncall.cdecl        ( address, signature, ... ) dyncall.stdcall      ( address, signature, ... ) dyncall.thiscall     ( address, signature, ... ) dyncall.thiscall.msvc( address, signature, ... ) dyncall.thiscall.gcc ( address, signature, ... ) dyncall.fastcall     ( address, signature, ... ) dyncall.fastcall.msvc( address, signature, ... ) dyncall.fastcall.gcc ( address, signature, ... )"},{"path":"/reference/dyncall.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Foreign Function Interface with support for almost all C types — dyncall","text":"address external pointer foreign function. signature character string specifying call signature describes foreign function type. See details. callmode character string specifying calling convention. argument effect platforms, Microsoft Windows 32-Bit Intel/x86 platforms. See details. ... arguments passed foreign function. Arguments converted R C values according call signature. See details.","code":""},{"path":"/reference/dyncall.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Foreign Function Interface with support for almost all C types — dyncall","text":"dyncall offers flexible Foreign Function Interface (FFI) C language support calls arbitrary pre-compiled  C function types run-time. Almost C fundamental  argument- return types supported including  extended support pointers. limitations given arity well. addition, Microsoft Windows 32-Bit Intel/x86 platform, supports multiple calling conventions interoperate System DLLs. Foreign C function types specified via plain text type signatures.  foreign C function type target function known FFI advance, preparation foreign call via plain text type signature information. several advantages: R arguments need match exactly.  Although R lacks fundamental C value types, supported via coercion interface (e.g. C float 64-bit integer). Arity argument type checks help make interface type-safe certain degree encourage end-users use interface interpreter prompt rapid application development. foreign function called specified address, external pointer obtained dynsym getNativeSymbolInfo. signature character string specifies formal argument--return types  foreign function using call signature string. match function type foreign function given address, otherwise can lead fatal R process crash. calling convention specified explicitly via function dyncall using callmode argument implicitly using .dyncall.*  functions. See details . Arguments passed via ... converted C according signature ; see details. Given signature matches foreign function type, FFI provides certain level type-safety users, exposing foreign functions via call wrappers done dynbind dynport. Several basic argument type-safety checks done preparation foreign function call:  arity formals actual arguments must match must compatible well. Otherwise, foreign function call aborted error risking fatal system crash.","code":""},{"path":"/reference/dyncall.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Foreign Function Interface with support for almost all C types — dyncall","text":"Functions return received C return value converted R value. See section ‘Call Signature’ details.","code":""},{"path":"/reference/dyncall.html","id":"type-signature","dir":"Reference","previous_headings":"","what":"Type Signature","title":"Foreign Function Interface with support for almost all C types — dyncall","text":"Type signatures used almost signature formats (call, library, structure union signature) also low-level (un)-packing functions. following table gives list valid type signatures supported C types. last two rows table refer typed pointer signatures. appear return type signature, external pointer returned  S3 struct object. See cdata details.","code":""},{"path":"/reference/dyncall.html","id":"call-signatures","dir":"Reference","previous_headings":"","what":"Call Signatures","title":"Foreign Function Interface with support for almost all C types — dyncall","text":"Call Signatures used dyncall ccallback describe foreign C function types. general form call signature following: calling sequence given argument types signature specified direct left--right order formal argument types defined C. type signatures put sequence without white space . closing bracket character ')' marks end argument types, followed single return type signature. Derived pointer types can specified untyped pointers via 'p' via prefix '*' following underlying base type (e.g. '*d' double *) type-safe. example, can prevent users passing numeric R atomic int* using '*' instead 'p'. Dervied pointer types aggregate union struct types supported combination framework handling foreign data types.  See cdata details. C type registered, signature *<typename> can used refer pointer aggregate C object type*. typed pointers aggregate objects used return type corresponding type information exists, returned value can printed accessed symbolically. examples C function prototypes corresponding call signatures:","code":""},{"path":"/reference/dyncall.html","id":"calling-convention","dir":"Reference","previous_headings":"","what":"Calling convention","title":"Foreign Function Interface with support for almost all C types — dyncall","text":"Calling Conventions specify ‘’ sub-routine calls performed, , ‘’ arguments results passed,  machine-level. differ significantly among families CPU Architectures  well OS Compiler implementations. platforms, single \"default\" C Calling Convention used. exception, Microsoft Windows 32-Bit Intel/x86 platform several calling conventions common. C libraries still use \"default\" C ( also known \"cdecl\" ) calling convention, working Microsoft System APIs DLLs, \"stdcall\" calling convention must used. follows description supported Win32 Calling Conventions: \"cdecl\" Dummy alias default \"stdcall\" C functions stdcall calling convention. Useful Microsoft Windows System Libraries (e.g. KERNEL32.DLL, USER32.DLL, OPENGL32.DLL ...). Third-party libraries usually prefer default C cdecl calling convention. \"fastcall.msvc\" C functions fastcall calling convention compiled Microsoft Visual C++ Compiler. rare usage. \"fastcall.gcc\" C functions fastcall calling convention compiled GNU C Compiler. rare usage. \"thiscall\" C++ member functions. \"thiscall.gcc\" C++ member functions compiled GNU C Compiler. \"thiscall.msvc\" C++ member functions compiled Microsoft Visual C++ Compiler. current version package practical reasons, callmode argument effect almost platforms, except R running Microsoft Windows 32-Bit Intel/x86 platform, dyncall uses specified calling convention. example, loading OpenGL across platforms, \"stdcall\" used instead \"default\",  Windows, OpenGL System DLL. exceptional, cases, \"default\" (\"cdecl\", alias) need used normal C shared libraries Windows. stage development, support C++ calls considered experimental. Support Fortran planed yet implemented dyncall.","code":""},{"path":"/reference/dyncall.html","id":"portability","dir":"Reference","previous_headings":"","what":"Portability","title":"Foreign Function Interface with support for almost all C types — dyncall","text":"implementation based dyncall library (part DynCall project). following processor architectures supported: X86 32- 64-bit, ARM v4t-v7 oabi/eabi (aapcs) armhf including support Thumb ISA, PowerPC 32-bit, MIPS 32- 64-Bit, SPARC 32- 64-bit; library built tested work various OSs: Linux, Mac OS X, Windows 32/64-bit, BSDs, Haiku, Nexenta/Open Solaris, Solaris, Minix Plan9, well embedded platforms Linux/ARM (OpenMoko, Beagleboard, Gumstix, Efika MX, Raspberry Pi), Nintendo DS (ARM), Sony Playstation Portable (MIPS 32-bit/eabi) iOS (ARM - armv6 mode ok, armv7 unstable). context R, dyncall currently support PowerPC 64-Bit.","code":""},{"path":"/reference/dyncall.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Foreign Function Interface with support for almost all C types — dyncall","text":"target address, calling convention call signature MUST match foreign function type, otherwise invocation lead fatal R process crash.","code":""},{"path":"/reference/dyncall.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Foreign Function Interface with support for almost all C types — dyncall","text":"Adler, D. (2012) “Foreign Library Interface”, R Journal, 4(1), 30--40, June 2012.   https://journal.r-project.org/articles/RJ-2012-004/ Adler, D., Philipp, T. (2008) DynCall Project.    https://dyncall.org","code":""},{"path":[]},{"path":"/reference/dyncall.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Foreign Function Interface with support for almost all C types — dyncall","text":"","code":"# \\donttest{ mathlib <- dynfind(c(\"msvcrt\",\"m\",\"m.so.6\")) x <- dynsym(mathlib,\"sqrt\") dyncall(x, \"d)d\", 144L) #> [1] 12 # }"},{"path":"/reference/dyncallback.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamic wrapping of R functions as C callbacks — callback","title":"Dynamic wrapping of R functions as C callbacks — callback","text":"Function wrap R functions C function pointers.","code":""},{"path":"/reference/dyncallback.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamic wrapping of R functions as C callbacks — callback","text":"","code":"ccallback(signature, fun, envir = new.env())"},{"path":"/reference/dyncallback.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamic wrapping of R functions as C callbacks — callback","text":"signature character string specifying call signature C function callback type. fun R function wrapped C function pointer. envir environment evaluate call fun.","code":""},{"path":"/reference/dyncallback.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dynamic wrapping of R functions as C callbacks — callback","text":"Callbacks user-defined functions registered foreign library executed later time within library. Examples include user-interface event handlers registered GUI toolkits, , comparison functions custom data types passed generic sort algorithm. function ccallback wraps R function fun C function pointer returns external pointer. foreign C function type wrapped R function specified call signature given signature. C function pointer called, global callback handler (implemented C) executed first, dynamically creates R call expression fun using arguments, passed C converted R, according argument types signature within call signature specified. See dyncall details format. Finally, handler evaluates R call expression within environment given envir. return, R return value fun coerced C value, according return type signature specified signature. error occurs evaluation, callback disabled invocations. (behaviour might change future.)","code":""},{"path":"/reference/dyncallback.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dynamic wrapping of R functions as C callbacks — callback","text":"ccallback returns external pointer synthetically generated C function.","code":""},{"path":"/reference/dyncallback.html","id":"portability","dir":"Reference","previous_headings":"","what":"Portability","title":"Dynamic wrapping of R functions as C callbacks — callback","text":"implementation based dyncallback library (part DynCall project). following processor architectures supported: X86, X64, ARM (including Thumb) partial stable support PowerPC 32-bit; library built tested work various OSs: Linux, Mac OS X, Windows 32/64-bit, BSDs, Haiku, Nexenta/Open Solaris, Minix Plan9, well embedded platforms Linux/ARM (OpenMoko, Beagleboard, Gumstix, Efika MX, Raspberry Pi), Nintendo DS (ARM), Sony Playstation Portable (MIPS 32-bit/eabi) iOS (ARM - armv6 mode ok, armv7 unstable). Special notes PowerPC 32-Bit: Callbacks System V (Linux/BSD) unstable release; MacOS X/Darwin works fine. context R, dyncallback currently support callbacks MIPS, SPARC PowerPC 64-Bit. Using dyncallback implement non-default calling conventions supported yet. (e.g. Window Procedures Win32/X86).","code":""},{"path":"/reference/dyncallback.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Dynamic wrapping of R functions as C callbacks — callback","text":"call signature MUST match foreign C callback function type, otherwise activated callback call C can lead fatal R process crash. small amount memory allocated wrapper. finalizer function frees allocated memory registered external pointer. external callback function pointer registered C library, reference also held R long callback can activated foreign C run-time context, otherwise garbage collector might call finalizer next invocation callback lead fatal R process crash well.","code":""},{"path":"/reference/dyncallback.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dynamic wrapping of R functions as C callbacks — callback","text":"Adler, D. (2012) “Foreign Library Interface”, R Journal, 4(1), 30--40, June 2012.   https://journal.r-project.org/articles/RJ-2012-004/ Adler, D., Philipp, T. (2008) DynCall Project.   https://dyncall.org","code":""},{"path":[]},{"path":"/reference/dyncallback.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dynamic wrapping of R functions as C callbacks — callback","text":"","code":"# \\donttest{ # Create a function, wrap it to a callback and call it via dyncall: f <- function(x, y) x + y cb <- ccallback(\"ii)i\", f) r <- dyncall(cb, \"ii)i\", 20, 3)  # Sort vectors directly via 'qsort' C library function using an R callback: dynbind(c(\"msvcrt\",\"c\",\"c.so.6\"), \"qsort(piip)v;\") #> $libhandle #> <pointer: 0x7f194b29cc30> #> attr(,\"path\") #> [1] \"libc.so.6\" #> attr(,\"auto.unload\") #> [1] TRUE #>  #> $unresolved.symbols #> character(0) #>  #> attr(,\"class\") #> [1] \"dynbind.report\" cb <- ccallback(\"pp)i\", function(px, py) {     x <- unpack(px, 0, \"d\")     y <- unpack(py, 0, \"d\")     if (x >  y) return(1) else if (x == y) return(0) else return(-1) }) x <- rnorm(100) qsort(x, length(x), 8, cb) #> NULL x #>   [1] -2.38522244 -1.86449352 -1.73451441 -1.55967487 -1.54382468 -1.53294451 #>   [7] -1.34708908 -1.24717386 -1.22305337 -1.21405299 -1.12616199 -1.12123984 #>  [13] -1.02031104 -1.01033483 -0.91128224 -0.90487151 -0.88192189 -0.87465293 #>  [19] -0.86490339 -0.84939789 -0.82037232 -0.80556315 -0.78483523 -0.68892789 #>  [25] -0.68106088 -0.67930166 -0.65168158 -0.62833235 -0.61350944 -0.46258421 #>  [31] -0.44257700 -0.40316910 -0.34370481 -0.31070892 -0.27736100 -0.27719334 #>  [37] -0.21964153 -0.20894433 -0.20204341 -0.18708519 -0.18157073 -0.11765854 #>  [43] -0.10011418 -0.08970302 -0.08376107 -0.07493962 -0.01768816 -0.01335815 #>  [49]  0.02250571  0.02587341  0.18924302  0.21431505  0.24595023  0.29974584 #>  [55]  0.36940352  0.37029475  0.37133409  0.39593934  0.39946943  0.45126832 #>  [61]  0.49494114  0.50556534  0.54800558  0.56433378  0.57087680  0.57515860 #>  [67]  0.62231350  0.62634964  0.65026012  0.67143198  0.71612085  0.75210885 #>  [73]  0.75915697  0.77348994  0.92669094  0.93283383  0.94238656  0.94240723 #>  [79]  0.95690820  0.96934524  0.97011204  1.09225667  1.10569415  1.11940719 #>  [85]  1.12437391  1.22427347  1.27989404  1.28190400  1.37875474  1.41423968 #>  [91]  1.48649589  1.49437156  1.50203471  1.61782226  1.74695088  1.92206047 #>  [97]  2.08370032  2.14427855  2.26984807  2.44312061 # }"},{"path":"/reference/dynfind.html","id":null,"dir":"Reference","previous_headings":"","what":"Portable searching and loading of shared libraries — dynfind","title":"Portable searching and loading of shared libraries — dynfind","text":"Function load shared libraries using platform-portable interface.","code":""},{"path":"/reference/dynfind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Portable searching and loading of shared libraries — dynfind","text":"","code":"dynfind(libnames, auto.unload=TRUE)"},{"path":"/reference/dynfind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Portable searching and loading of shared libraries — dynfind","text":"libnames vector character strings specifying several short library names. auto.unload logical: TRUE finalizer registered closes library garbage collection. See dynload details.","code":""},{"path":"/reference/dynfind.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Portable searching and loading of shared libraries — dynfind","text":"dynfind offers platform-portable naming interface loading specific shared library. naming scheme standard locations shared libraries OS-specific. loading shared library dynamically run-time across platforms via standard interfaces dynload dyn.load,  platform-test usually needed specify OS-dependant library file path. library name problem encountered via breaking library file path several abstract components: permutation values component concatenation, list possible file paths can derived. dynfind goes list try opening library. first success, search stopped function returns. Given three components ‘location’, ‘prefix’ ‘suffix’ set properly per OS basis, unique identification library given ‘libname’ - short library name. libraries, multiple ‘short library name’ needed make mechanism work across major platforms. example, load Standard C Library across major R platforms: Windows MSVCRT.dll loaded; libc.dylib Mac OS X; libc..6 Linux libc.BSD. sample list values three components: ‘location’: “/usr/local/lib/”, “/Windows/System32/”. ‘prefix’: “lib” (common),  “” (empty - common Windows). ‘suffix’: “.dll” (Windows), “.” (ELF), “.dylib” (Mac OS X) “” (empty - useful platforms). vector ‘locations’ initialized environment variables 'PATH' Windows  LD_LIBRARY_PATH Unix-flavour systems additional hardcoded locations: /opt/local/lib,  /usr/local/lib,  /usr/lib  /lib. (set hardcoded locations might expand change within next minor releases). file extension depends OS: '.dll' (Windows), '.dylib' (Mac OS X), '.' (others). Mac OS X, search library includes ‘Frameworks’ folders well. happens normal library search procedure uses slightly different naming pattern separate search phase: ‘frameworksLocation’ vector locations /System/Library/ /Library/. dynfind loads library via dynload passing parameter auto.unload.","code":"lib <- dynfind(c(\"msvcrt\",\"c\",\"c.so.6\"))"},{"path":"/reference/dynfind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Portable searching and loading of shared libraries — dynfind","text":"dynfind returns external pointer (library handle), search successful. Otherwise, library located, NULL returned.","code":""},{"path":[]},{"path":"/reference/dynload.html","id":null,"dir":"Reference","previous_headings":"","what":"Loading of shared libraries and resolving of symbols (Alternative Framework) — dynload","title":"Loading of shared libraries and resolving of symbols (Alternative Framework) — dynload","text":"Alternative framework loading shared libraries resolving symbols. framework offers automatic unload management shared libraries provides direct interface dynamic linker OS.","code":""},{"path":"/reference/dynload.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loading of shared libraries and resolving of symbols (Alternative Framework) — dynload","text":"","code":"dynload(libname, auto.unload=TRUE) dynsym(libhandle, symname, protect.lib=TRUE) dynunload(libhandle)"},{"path":"/reference/dynload.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loading of shared libraries and resolving of symbols (Alternative Framework) — dynload","text":"libname character string giving pathname shared library OS-specific notation. libhandle external pointer representing handle opened library. symname character string specifying symbolic name resolved. auto.unload logical, TRUE finalizer registered automatically unload library. protect.lib logical, TRUE resolved external pointers protect library handles finalization.","code":""},{"path":"/reference/dynload.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Loading of shared libraries and resolving of symbols (Alternative Framework) — dynload","text":"dynload returns external pointer libhandle success. Otherwise NULL returned, library found linkage failed. dynsym returns external pointer address success. Otherwise NULL returned, address invalid symbol found. dynunload always returns NULL.","code":""},{"path":"/reference/dynload.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Loading of shared libraries and resolving of symbols (Alternative Framework) — dynload","text":"dynload loads shared library current R process using OS-specific dynamic linker interface.  libname passed -directly dynamic linker thus given OS-specific notation - see details.  success, handle library represented external pointer R objects returned, otherwise NULL.  auto.unload TRUE, finalizer function registered unload library garbage collection via dynunload. dynsym looks symbol names loaded libraries resolves memory addresses returned external pointer R objects. Otherwise NULL returned.  protect.lib TRUE, library handle protected resolved address external pointers unloading. dynunload explicitly unreferences loaded library specified libhandle. Setting auto.unload protect.lib TRUE, libraries remain loaded long resolved symbols use, get automatic unloaded  resolved symbols remain. Dynamic linkers usually hold internal link count, library can opened multiple times via dynload  - balanced number calls dynunload decreases link count unload library . Similar functionality available via dyn.load getNativeSymbolInfo,  except path names filtered automatic unloading libraries supported.","code":""},{"path":"/reference/dynload.html","id":"shared-library","dir":"Reference","previous_headings":"","what":"Shared library","title":"Loading of shared libraries and resolving of symbols (Alternative Framework) — dynload","text":"Shared libraries single files contain compiled code, data meta-information. code data can loaded mapped process run-time . Operating system platforms slightly different schemes naming,  searching linking options.","code":""},{"path":"/reference/dynload.html","id":"library-search-on-posix-platforms-linux-bsd-sun-solaris-","dir":"Reference","previous_headings":"","what":"Library search on Posix platforms (Linux,BSD,Sun Solaris)","title":"Loading of shared libraries and resolving of symbols (Alternative Framework) — dynload","text":"following text taken Linux dlopen manual page: search rules applied path names contain embedded '/'. LD_LIBRARY_PATH environment variable defined contain colon-separated list directories, searched. cache file /etc/ld..cache checked see whether contains entry filename. directories /lib /usr/lib searched (order). library dependencies shared libraries, also automatically  loaded dynamic linker using rules.","code":""},{"path":"/reference/dynload.html","id":"library-search-on-darwin-mac-os-x-platforms","dir":"Reference","previous_headings":"","what":"Library search on Darwin (Mac OS X) platforms","title":"Loading of shared libraries and resolving of symbols (Alternative Framework) — dynload","text":"following text taken Mac OS X dlopen manual page: dlopen() searches compatible Mach-O file directories specified set environment variables process's current working directory.  set, environment variables must contain  colon-separated list directory paths, can absolute relative current working directory. environment variables $LD_LIBRARY_PATH, $DYLD_LIBRARY_PATH, $DYLD_FALLBACK_LIBRARY_PATH.  first two variables default value. default value $DYLD_FALLBACK_LIBRARY_PATH $HOME/lib;/usr/local/lib;/usr/lib.  dlopen() searches directories specified environment variables order listed. path contain slash character (.e. just leaf name), dlopen() searches following  finds compatible Mach-O file: $LD_LIBRARY_PATH, $DYLD_LIBRARY_PATH, current working directory, $DYLD_FALLBACK_LIBRARY_PATH. path contains slash (.e. full path partial path) dlopen() searches following following finds compatible Mach-O file: $DYLD_LIBRARY_PATH (leaf name path ), current working directory (partial paths), $DYLD_FALLBACK_LIBRARY_PATH (leaf name path ).","code":""},{"path":"/reference/dynload.html","id":"library-search-on-microsoft-windows-platforms","dir":"Reference","previous_headings":"","what":"Library search on Microsoft Windows platforms","title":"Loading of shared libraries and resolving of symbols (Alternative Framework) — dynload","text":"following text taken Window SDK Documentation: file name extension specified [...], default library extension  .dll appended. However, file name string can include trailing point character (.)  indicate [shared library] module name extension. path specified, function searches  loaded modules whose base name matches base name module loaded.  name matches, load succeeds. Otherwise, function searches file  following sequence: directory application loaded. current directory. system directory. Use GetSystemDirectory Win32 API function get path directory. 16-bit system directory. function obtains path directory, searched. Windows /98/95:  directory exist. Windows directory. Use GetWindowsDirectory Win32 API function get path directory. directories listed PATH environment variable. Windows Server 2003, Windows XP SP1:  default value 1 (current directory searched system Windows directories). Windows XP:  1, current directory searched system Windows directories, directories PATH environment variable. default value 0 (current directory searched system Windows directories). first directory searched one directory containing image file used create calling process. allows private dynamic-link library (DLL) files associated process found without adding process's installed directory PATH environment variable. search path can altered using SetDllDirectory function. solution recommended instead using SetCurrentDirectory hard-coding full path DLL. path specified redirection file application, function searches module application's directory. module exists application's directory, LoadLibrary function ignores specified path loads module application's directory. module exist application's directory, LoadLibrary loads module specified directory. information, see Dynamic Link Library Redirection Windows SDK Documentation.","code":"HKLM\\System\\CurrentControlSet\\Control\\Session Manager\\SafeDllSearchMode HKLM\\System\\CurrentControlSet\\Control\\Session Manager\\SafeDllSearchMode"},{"path":"/reference/dynload.html","id":"portability","dir":"Reference","previous_headings":"","what":"Portability","title":"Loading of shared libraries and resolving of symbols (Alternative Framework) — dynload","text":"implementation based dynload library (part DynCall project) ported major R platforms (ELF (Linux,BSD,Solaris), Mach-O (Mac OS X) Portable Executable (Win32/64)).","code":""},{"path":[]},{"path":"/reference/dynport.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamic R Bindings to standard and common C libraries — dynport","title":"Dynamic R Bindings to standard and common C libraries — dynport","text":"Function bind APIs standard common C libraries R via dynamically created interface environment objects comprising R wrappers C functions, object-like macros, enums data types.","code":""},{"path":"/reference/dynport.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamic R Bindings to standard and common C libraries — dynport","text":"","code":"dynport(portname, portfile=NULL,  repo=system.file(\"dynports\",package=\"rdyncall\") )"},{"path":"/reference/dynport.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamic R Bindings to standard and common C libraries — dynport","text":"portname name dynport, given literal character string. portfile NULL character string giving script file parse ; portname repo . repo character string giving path root dynport repository.","code":""},{"path":"/reference/dynport.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dynamic R Bindings to standard and common C libraries — dynport","text":"dynport offers convenient method binding entire C libraries R. mechanism runs cross-platform uses dynamic linkage implies run-time library choosen binding need preinstalled system. Depending OS, run-time libraries may preinstalled require manual installation. See rdyncall-demos OS-specific installation notes several C libraries. binding method data-driven using platform-portable specifications named DynPort files. DynPort files stored repository installed part package installation. dynport processes DynPort file given portname,  environment object created, populated R wrapper helper objects make interface C library, attached search path name dynport:<PORTNAME>. Unloading previously loaded dynport environments achieved via detach(dynport:<PORTNAME>). rdyncall version 0.7.4, R name space objects used containers described article Foreign Library Interface, thus  dynport ‘packages’ appeared \"package:<PORTNAME>\" search path. mechanism create synthesized R packages run-time  required use .Internal calls. since use internal R functions permitted packages distributed CRAN downgraded package use ordinary environment  objects starting version 0.7.5 public interface creation R namespace objects available. following gives list currently available DynPorts: current implementation DynPort files R scripts perform three tasks: Functions (pointer--function variables) mapped via dynbind description C library using library signatures. Symbolic names assigned values object-like macro defines C enum types. Run-time type-information objects aggregate C data types (struct union) registered via cstruct cunion. file path DynPort file derived portname per default. refer \"<repo>/<portname>.R\"   repo usually refers initial DynPort repository located sub-folder \"dynports/\" package. portfile given, value taken file path (usually testing purpose). tool suite, comprising AWK (boost wave), GCC Preprocessor, GCC-XML XSLT, used generate available DynPort files automatically extracting type information C library header files. future release, DynPort format changed language-neutral text file document. interested reader:  first prototyp currently available FFI extension Lua  programming language (see luadyncall subversion sub-tree). third revision (including function types call signatures, bitfields, arrays, etc..) currently development.","code":""},{"path":"/reference/dynport.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dynamic R Bindings to standard and common C libraries — dynport","text":"Adler, D. (2012) “Foreign Library Interface”, R Journal, 4(1), 30--40, June 2012.   https://journal.r-project.org/articles/RJ-2012-004/ Adler, D., Philipp, T. (2008) DynCall Project. https://dyncall.org Clark, J. (1998). expat - XML Parser Toolkit. https://expat.sourceforge.net Ikits, M. Magallon, M. (2002).  OpenGL Extension Wrangler Library. https://glew.sourceforge.net Latinga, S. (1998). Simple DirectMedia Layer Library. http://www.libsdl.org Segal, M. Akeley, K. (1992). OpenGL Graphics System. Specification, Version 1.0. http://www.opengl.org Smith, R. (2001). Open Dynamics Engine. http://www.ode.org","code":""},{"path":"/reference/dynport.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dynamic R Bindings to standard and common C libraries — dynport","text":"","code":"if (FALSE) { # Using SDL and OpenGL in R  dynport(SDL) dynport(GL) # Initialize Video Sub-system SDL_Init(SDL_INIT_VIDEO) # Initialize Screen with OpenGL Context and Double Buffering SDL_SetVideoMode(320,256,32,SDL_OPENGL+SDL_DOUBLEBUF) # Clear Color and Clear Screen glClearColor(0,0,1,0) # blue glClear(GL_COLOR_BUFFER_BIT) # Flip Double-Buffer SDL_GL_SwapBuffers() }"},{"path":"/reference/packing.html","id":null,"dir":"Reference","previous_headings":"","what":"Handling of foreign C fundamental data types — packing","title":"Handling of foreign C fundamental data types — packing","text":"Functions unpack/pack (read/write) foreign C data types /    R atomic vectors C data objects arrays pointers     structures.","code":""},{"path":"/reference/packing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handling of foreign C fundamental data types — packing","text":"","code":"pack(x, offset, sigchar, value) unpack(x, offset, sigchar)"},{"path":"/reference/packing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handling of foreign C fundamental data types — packing","text":"x atomic vector (logical, raw, integer double) external pointer. offset integer specifying byte offset starting 0. sigchar character string specifying C data type type signature. value R object value coerced packed foreign C data type.","code":""},{"path":"/reference/packing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Handling of foreign C fundamental data types — packing","text":"function pack converts R value C data type     specified signature sigchar writes raw C     foreign data value byte position offset object x.     function .unpack extracts C data type according     signature sigchar byte position offset     object x converts C value R value returns . Byte offset calculations start 0 relative first byte     atomic vectors data area. x atomic vector, bound check carried     read/write access. Otherwise, x external pointer,     C NULL pointer check.","code":""},{"path":"/reference/packing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handling of foreign C fundamental data types — packing","text":"unpack returns read C data type coerced R value.","code":""},{"path":[]},{"path":"/reference/packing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Handling of foreign C fundamental data types — packing","text":"","code":"# transfer double to array of floats and back, compare precision: n <- 6 input <- rnorm(n) buf <- raw(n*4) for (i in 1:n) {     pack(buf, 4 * (i - 1), \"f\", input[i]) }  output <- numeric(n) for (i in 1:n) {     output[i] <- unpack(buf, 4 * (i - 1), \"f\") } # difference between double and float difference <- output - input print(cbind(input, output, difference)) #>            input      output    difference #> [1,] -1.71385238 -1.71385241 -2.208269e-08 #> [2,]  0.27961030  0.27961031  8.393599e-09 #> [3,]  0.50118793  0.50118792 -7.273681e-09 #> [4,]  0.09378387  0.09378387 -4.042505e-10 #> [5,] -1.10247739 -1.10247743 -3.884187e-08 #> [6,] -0.73981718 -0.73981720 -2.568001e-08"},{"path":"/reference/rdyncall-demos.html","id":null,"dir":"Reference","previous_headings":"","what":"rdyncall demos: Platform installation notes for required libraries — rdyncall-demos","title":"rdyncall demos: Platform installation notes for required libraries — rdyncall-demos","text":"demos rdyncall package (see demo(package=\"rdyncall\")) use shared libraries SDL, OpenGL Expat via dynports - dynamic binding approach requires, prebuilt binary shared library files already installed. Depending host system, libraries officially part OS Distribution, others need installed get demos running. current version package, installation additional shared C libraries need done manually. follows overview  required libraries installation notes various operating-systems distributions.","code":""},{"path":"/reference/rdyncall-demos.html","id":"overview-of-libraries","dir":"Reference","previous_headings":"","what":"Overview of Libraries","title":"rdyncall demos: Platform installation notes for required libraries — rdyncall-demos","text":"following Libraries used 'run-time' pre-compiled binaries particular target OS Hardware platform. notes installation additional run-time libraries required rdyncall demos: short: Place shared libraries ( *.DLL, *.*.dylib) standard location modify LD_LIBRARY_PATH(unix) PATH(windows) dynfind can find libraries. Mac OS X framework folders supported well. Place *.framework folder /Library/Frameworks. Detailed platform-specific installation instructions follow .","code":""},{"path":"/reference/rdyncall-demos.html","id":"windows-installation-notes","dir":"Reference","previous_headings":"","what":"Windows Installation Notes","title":"rdyncall demos: Platform installation notes for required libraries — rdyncall-demos","text":"Download *.zip files, unpack place *.DLL files place within PATH. 32-Bit versions: 64-Bit version: prebuilt version SDL http://www.drangon.org/mingw work (exiting OpenGL errors). know resources prebuilt 64-bit packages SDL expat, please report.","code":""},{"path":"/reference/rdyncall-demos.html","id":"mac-os-x-installation-notes","dir":"Reference","previous_headings":"","what":"Mac OS X Installation Notes","title":"rdyncall demos: Platform installation notes for required libraries — rdyncall-demos","text":"Download *.dmg files, mount (double-click) copy *.framework folders /Library/Frameworks.","code":""},{"path":"/reference/rdyncall-demos.html","id":"linux-debian-installation-notes","dir":"Reference","previous_headings":"","what":"Linux/Debian Installation Notes","title":"rdyncall demos: Platform installation notes for required libraries — rdyncall-demos","text":"Debian Package installation via aptitude Depending sound system, <SOUNDSYS> explaced one following: alsa, , esd, arts, oss, nas pulseaudio. Tested Debian 5 6 (lenny squeeze).","code":"aptitude install <pkg-names>.."},{"path":"/reference/rdyncall-demos.html","id":"linux-fedora-installation-notes","dir":"Reference","previous_headings":"","what":"Linux/Fedora Installation Notes","title":"rdyncall demos: Platform installation notes for required libraries — rdyncall-demos","text":"Tested Fedora 13 14 x86 x86_64.","code":"pkcon install <pkgname>.."},{"path":"/reference/rdyncall-demos.html","id":"linux-opensuse-installation-notes","dir":"Reference","previous_headings":"","what":"Linux/openSUSE Installation Notes","title":"rdyncall demos: Platform installation notes for required libraries — rdyncall-demos","text":"openSUSE installation notes confirmed.","code":"zypper in <pkgname>.."},{"path":"/reference/rdyncall-demos.html","id":"netbsd-installation-notes","dir":"Reference","previous_headings":"","what":"NetBSD Installation Notes","title":"rdyncall demos: Platform installation notes for required libraries — rdyncall-demos","text":"Installation via pkgsrc:","code":"pkg_add <pkgname>.."},{"path":"/reference/rdyncall-demos.html","id":"openbsd-installation-notes","dir":"Reference","previous_headings":"","what":"OpenBSD Installation Notes","title":"rdyncall demos: Platform installation notes for required libraries — rdyncall-demos","text":"Using packages: SDL dynport failed OpenBSD 4.8 - multimedia demos - using R 2.7 ports tree. must something pthread discrepancies SDL R.","code":"pkg_add <pkgname>.."},{"path":"/reference/rdyncall-demos.html","id":"freebsd-installation-notes","dir":"Reference","previous_headings":"","what":"FreeBSD Installation Notes","title":"rdyncall demos: Platform installation notes for required libraries — rdyncall-demos","text":"Using packages:","code":"pkg_add -r <pkgname>.."},{"path":"/reference/rdyncall-demos.html","id":"solaris-installation-notes","dir":"Reference","previous_headings":"","what":"Solaris Installation Notes","title":"rdyncall demos: Platform installation notes for required libraries — rdyncall-demos","text":"OpenCSW offers prebuilt binaries Solaris. installation OpenCSW packages done via pkgutil. See http://www.opencsw.org details OpenCSW project.","code":"pkgutil -i <pkgname>.."},{"path":"/reference/rdyncall.html","id":null,"dir":"Reference","previous_headings":"","what":"Improved Foreign Function Interface (FFI) and Dynamic Bindings to C Libraries (e.g. OpenGL) — rdyncall","title":"Improved Foreign Function Interface (FFI) and Dynamic Bindings to C Libraries (e.g. OpenGL) — rdyncall","text":"package provides cross-platform framework dynamic binding   C libraries using flexible Foreign Function Interface (FFI).   FFI supports almost fundamental C types, multiple calling conventions,   symbolic access foreign C struct/union data types wrapping R functions   C callback function pointers.   Dynamic bindings shared C libraries data-driven cross-platform binding specification   using compact plain text format ; initial repository bindings couple   common C libraries (OpenGL, SDL, Expat, glew, CUDA, OpenCL, ODE, R) comes package.   package includes variety technology demos OS-specific notes installation shared libraries.","code":""},{"path":"/reference/rdyncall.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Improved Foreign Function Interface (FFI) and Dynamic Bindings to C Libraries (e.g. OpenGL) — rdyncall","text":"rdyncall offers stack interoperability technologies working foreign compiled languages using cross-platform portable abstraction methods. R application development, package facilitates direct access R C Application Programming Interface (API) common libraries. enables new style development: R applications can use low-level services portable C libraries. System-level code can implemented R without leaving language. C APIs can explored within R interpreter. Moving R code one platform involve recompilation. Ofcourse, run-time libraries need installed using standard procedure target Operating-System Distribution. See rdyncall-demos details . R core development research, package provides improved Foreign Function Interface (FFI) can used call arbitrary foreign precompiled C code without need additional compilation wrapper code. back-end library extendable new calling conventions (Fortran,Pascal,COM,etc.. - focus release, might supported officially near futurue). Basic type-safety checks argument passing framework support working foreign C data types pointers, arrays, structs wrapping R functions first-level C callback function pointers round framework.","code":""},{"path":"/reference/rdyncall.html","id":"overview","dir":"Reference","previous_headings":"","what":"Overview","title":"Improved Foreign Function Interface (FFI) and Dynamic Bindings to C Libraries (e.g. OpenGL) — rdyncall","text":"Flexible FFI support almost C types, type-safety checks multiple calling conventions. See dyncall. Loading shared libraries automatic unload management using direct access OS linker. See dynload. Cross-platform naming loading shared libraries. See dynfind. Binding C library functions via thin call wrappers. See dynbind. Handling foreign C pointer, array struct/union data types. See packing struct. Dynamic wrapping R functions C function pointers used C callbacks. See ccallback. Dynamic bindings standard common C libraries APIs (functions, variables, macro constants, enums, struct union types). See dynport.","code":""},{"path":"/reference/rdyncall.html","id":"getting-started","dir":"Reference","previous_headings":"","what":"Getting Started","title":"Improved Foreign Function Interface (FFI) and Dynamic Bindings to C Libraries (e.g. OpenGL) — rdyncall","text":"Several demos ranging simple FFI calls C standard math library complex 3D OpenGL/SDL Applications available. See demos(package=\"rdyncall\") overview. demos require shared C libraries installed system. Please read rdyncall-demos details.","code":""},{"path":"/reference/rdyncall.html","id":"supported-platforms","dir":"Reference","previous_headings":"","what":"Supported Platforms","title":"Improved Foreign Function Interface (FFI) and Dynamic Bindings to C Libraries (e.g. OpenGL) — rdyncall","text":"low-level implementation mainly based libraries DynCall Project (https://dyncall.org). library suite distributed part package source tree. dyncall dyncallback libraries implement generic low-level services help small amount hand-written assembly code careful modeling target machine's calling sequence platform support. version 0.6, following processor architectures supported: Intel i386 32-bit AMD 64-bit Platforms ARM 32-bit (OABI, EABI ARMHF ABI support Thumb) PowerPC 32-bit (support callbacks implemented Linux/BSD) MIPS 32- 64-bit (support callbacks yet implemented) SPARC 32- 64-bit (support callbacks yet implemented) DynCall libraries tested Linux, Mac OS X, Windows, BSD derivates exotic platforms game consoles Plan9. Please see details portability dyncall, dyncallback dynload official DynCall manual full details back-end. R Package tested several major R platforms. following gives list comments platforms status package.","code":""},{"path":"/reference/rdyncall.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Improved Foreign Function Interface (FFI) and Dynamic Bindings to C Libraries (e.g. OpenGL) — rdyncall","text":"Adler, D. (2012) “Foreign Library Interface”, R Journal, 4(1), 30--40, June 2012.   https://journal.r-project.org/articles/RJ-2012-004/ Adler, D., Philipp, T. (2008) DynCall Project.   https://dyncall.org","code":""},{"path":"/reference/rdyncall.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Improved Foreign Function Interface (FFI) and Dynamic Bindings to C Libraries (e.g. OpenGL) — rdyncall","text":"","code":"if (FALSE) { # multimedia example # load dynports for OpenGL, Simple DirectMedia library # globals: surface <- NULL # init SDL and OpenGL init <- function() {   dynport(SDL)   dynport(GL)   if ( SDL_Init(SDL_INIT_VIDEO) != 0 ) stop(\"SDL_Init failed\")   surface <<- SDL_SetVideoMode(320,240,32,SDL_DOUBLEBUF+SDL_OPENGL)   cat(\"surface dimension:\", surface$w, \"x\",surface$h,sep=\"\") } # draw blue screen updateSurface <- function(t) {   glClearColor(0,0,t %% 1,0)   glClear(GL_COLOR_BUFFER_BIT+GL_DEPTH_BUFFER_BIT)   SDL_GL_SwapBuffers() } # wait till close mainloop <- function() {   quit <- FALSE   evt <- cdata(SDL_Event)   base <- SDL_GetTicks() / 1000   t <- 0   while(!quit) {     updateSurface(t)     while(SDL_PollEvent(evt)) {       if ( evt$type == SDL_QUIT ) quit <- TRUE     }     now <- SDL_GetTicks() / 1000     t <- now - base   } } init() mainloop() }"},{"path":"/reference/struct.html","id":null,"dir":"Reference","previous_headings":"","what":"Allocation and handling of foreign C aggregate data types — struct","title":"Allocation and handling of foreign C aggregate data types — struct","text":"Functions allocation, access registration foreign C struct union data type.","code":""},{"path":"/reference/struct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Allocation and handling of foreign C aggregate data types — struct","text":"","code":"cdata(type) as.ctype(x, type) cstruct(sigs, envir=parent.frame()) cunion(sigs, envir=parent.frame()) # S3 method for struct $(x, index) # S3 method for struct $(x, index) <- value # S3 method for struct print(x, indent = 0, ...)"},{"path":"/reference/struct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Allocation and handling of foreign C aggregate data types — struct","text":"x external pointer atomic raw vector S3 class 'struct'. type S3 typeinfo Object character string names structure type. sigs character string specifies several C struct/union type signatures. envir environment install S3 type information object(s). index character string specifying field name. indent indentation level pretty printing structures. value value converted according struct/union field type given field index. ... additional arguments passed print method.","code":""},{"path":"/reference/struct.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Allocation and handling of foreign C aggregate data types — struct","text":"References foreign C data objects represented objects class 'struct'. Two reference types supported: External pointers returned dyncall using         call signature typed pointer return type signature         pointers extracted result unpack S3         struct $-operators. Internal objects, memory-managed R, allocated         cdata: atomic raw storage object returned,         initialized length equal byte size foreign C data         type. order access manipulate data fields foreign C aggregate data objects, “$” “$<-” S3 operator methods can used. S3 objects class struct attribute struct set name typeinfo object, provides run-time type information particular foreign C type. run-time type information foreign C struct union types need registered via cstruct cunion functions. C data types specified sigs, signature character string. formats types described next: Structure type signatures describe layout aggregate struct C data types. Type Signatures used within ‘field-types’. ‘field-names’ consists space separated identifier names match number fields. example C struct type: corresponding structure type signature : Union type signatures describe components union C data type. Type signatures used within ‘field-types’. ‘field-names’ consists space separated identifier names match number fields. example C union type, corresponding union type signature : \"Value|<LongValue>}anInt aFloat aStruct;\" .ctype can used cast foreign C data reference different type. using external pointer reference, can lead quickly fatal R process crash - like C.","code":"struct Rect {   signed short x, y;   unsigned short w, h; }; \"Rect{ssSS}x y w h;\" union Value {   int anInt;   float aFloat;   struct LongValue aStruct };"},{"path":[]},{"path":"/reference/struct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Allocation and handling of foreign C aggregate data types — struct","text":"","code":"# Specify the following foreign type: # struct Rect { #     short x, y; #     unsigned short w, h; # } cstruct(\"Rect{ssSS}x y w h;\") r <- cdata(Rect) print(r) #> struct  Rect  { #>  } r$x <- 40 #> Error in if (is.na(offset)) stop(\"unknown field index '\", index, \"'\"): argument is of length zero r$y <- 60 #> Error in if (is.na(offset)) stop(\"unknown field index '\", index, \"'\"): argument is of length zero r$w <- 10 #> Error in if (is.na(offset)) stop(\"unknown field index '\", index, \"'\"): argument is of length zero r$h <- 15 #> Error in if (is.na(offset)) stop(\"unknown field index '\", index, \"'\"): argument is of length zero print(r) #> struct  Rect  { #>  } str(r) #>  'struct' raw [1:8] 00 00 00 00 ... #>  - attr(*, \"struct\")= chr \"Rect\""},{"path":"/reference/typeinfo.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 class for run-time type information of foreign C data types — typeinfo","title":"S3 class for run-time type information of foreign C data types — typeinfo","text":"S3 class run-time type information foreign C data types.","code":""},{"path":"/reference/typeinfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 class for run-time type information of foreign C data types — typeinfo","text":"","code":"typeinfo(name, type = c(\"base\",\"pointer\",\"struct\",\"union\"),     size = NA, align = NA, basetype = NA, fields = NA,     signature = NA) get_typeinfo(name, envir = parent.frame())"},{"path":"/reference/typeinfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 class for run-time type information of foreign C data types — typeinfo","text":"name character string specifying type name. type character string specifying type. size integer, size type bytes. align integer, alignment type bytes. basetype character string, base type 'pointer' types. signature character string specifying struct/union type signature. envir environment look type object. fields data frame type offset information specifies aggregate struct union types.","code":""},{"path":"/reference/typeinfo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"S3 class for run-time type information of foreign C data types — typeinfo","text":"Type information objects created run-time describe concrete layout foreign C data types host machine. type signatures give abstract information e.g. field types names aggregate structure types, objects store concrete memory size, alignment layout information C data types.","code":""},{"path":"/reference/typeinfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 class for run-time type information of foreign C data types — typeinfo","text":"List object tagged S3 class 'typeinfo' following named entries type Type name. size Size bytes. align Alignment bytes. fields Data frame field information following columns:","code":""},{"path":[]},{"path":"/reference/utils.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility functions for working with foreign C data types — utils","title":"Utility functions for working with foreign C data types — utils","text":"Functions low-level operations C pointers well helper     functions objects handle C float arrays strings.","code":""},{"path":"/reference/utils.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility functions for working with foreign C data types — utils","text":"","code":"is.nullptr(x)  as.externalptr(x) is.externalptr(x)  floatraw(n) as.floatraw(x) floatraw2numeric(x)  ptr2str(x) strarrayptr(x) strptr(x)  offset_ptr(x, offset)"},{"path":"/reference/utils.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility functions for working with foreign C data types — utils","text":"x R object. n number elements allocate. offset offset given bytes.","code":""},{"path":"/reference/utils.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Utility functions for working with foreign C data types — utils","text":".nullptr tests external pointer given x represents     C NULL pointer. .externalptr returns external pointer data area atomic     vector given x. external pointer holds additional reference     x R object prevent garbage collection. .externalptr tests object given x external     pointer. floatraw creates array capacity store n     single-precision C float values. array implemented via     raw vector. .floatraw coerces numeric vector single-precision C     float vector. Values given x converted C float     values stored R raw vector via pack. function     useful calling foreign functions expect C float pointer     via dyncall. floatraw2numeric coerces C float (raw) vector numeric     vector. ptr2str, strarrayptr, strptr currently     experimental. offset_ptr creates new external pointer pointing x plus     byte offset. x given external pointer,     address increased offset, , x given     atomic vector, address data (pointing offset zero) taken     basis increased offset. returned external pointer     protected (offered C function R_MakeExternalPtr)     external pointer x.","code":""},{"path":"/reference/utils.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility functions for working with foreign C data types — utils","text":"logical value returned .nullptr .externalptr.  .externalptr offset_ptr returns external pointer     value. floatraw .floatraw return atomic vector     type raw tagged class 'floatraw'. floatraw2numeric returns numeric atomic vector.","code":""},{"path":"/reference/utils.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utility functions for working with foreign C data types — utils","text":"","code":"is.nullptr(NULL) #> [1] FALSE  one <- as.externalptr(1) is.externalptr(one) #> [1] TRUE  floatraw(1) #> [1] 00 00 00 00 #> attr(,\"class\") #> [1] \"floatraw\"  floats <- as.floatraw(1:10) all.equal(floatraw2numeric(floats), 1:10) #> [1] TRUE"}]
